<?php
/**
 * File for Individus class
 * @package App\Controllers
 * @filesource
 */
namespace App\Controllers;

use Core\View;
use App\Models\Individu;
use App\Models\TypeIndividu;
use App\Models\TypeDocument;
use App\Models\Document;
use function var_dump;

/**
 * Class Individus
 * Control the Individu domain of the application
 * @package App\Controllers
 */
class Individus extends Authenticated
{
    /**
     * @var $jsonListTypesIndividu TypeIndividu dropdown values in json format to be injected in the view
     */
    public $jsonListTypesIndividu;

    /**
     * Redirect to create-individu.php view and transmit a list of TypesIndividu as json
     * @return void
     * @throws \Exception
     */
    public function newAction(){
        if(isset($_SESSION['current_user'])){$current_user=$_SESSION['current_user'];}else{$current_user='';}
        if($current_user->hasPermission('creation')) {
            $isThereFirstTypeIndividu = TypeIndividu::isThereFirstTypeIndividu();
            if($isThereFirstTypeIndividu) {
                $jsonListTypesIndividu = TypeIndividu::getListAsJson();
                View::render('Individus/create-individu.php', [
                    'jsonListTypesIndividu' => $jsonListTypesIndividu
                ]);
            }else{
                View::render('Individus/no-type-individu.php');
            }
        }else{
            View::render('Default/no-permission.php');
        }
    }

    /**
     * Handle creation of individu and redirect according to success or faillure
     * @return void
     * @throws \Exception
     */
    public function createAction(){
        if(isset($_SESSION['current_user'])){$current_user=$_SESSION['current_user'];}else{$current_user='';}
        if($current_user->hasPermission('creation')) {
            $typeindividuid = TypeIndividu::getIndexFromName($_POST['typeindividu']);
            $_POST['typeindividuid']= $typeindividuid;
            $individu = new Individu($_POST);

            if ($individu->save()) {
                $this->redirect('/individus/create-individu-success');
            } else {
                $jsonListTypesIndividu = TypeIndividu::getListAsJson();
                View::render('Individus/create-individu.php', [
                    'individu' => $individu,
                    'jsonListTypesIndividu' => $jsonListTypesIndividu
                ]);
            }
        }else{
            View::render('Default/no-permission.php');
        }
    }

    /**
     * Redirect to create-individu-success
     * @return void
     */
    public function createIndividuSuccessAction(){
        if(isset($_SESSION['current_user'])){$current_user=$_SESSION['current_user'];}else{$current_user='';}
        if($current_user->hasPermission('creation')) {
            View::render('Individus/create-individu-success.php');
        }else{
            View::render('Default/no-permission.php');
        }
    }

    /**
     * Redirect to search-individu.php view
     * @return void
     */
    public function searchAction(){
        if(isset($_SESSION['current_user'])){$current_user=$_SESSION['current_user'];}else{$current_user='';}
        if($current_user->hasPermission('consultation')) {
            View::render('Individus/search-individu.php');
        }else{
            View::render('Default/no-permission.php');
        }
    }

    /**
     * List all Individus objects corresponding to search term from search form
     * @return void
     */
    public function listAction(){
        if(isset($_SESSION['current_user'])){$current_user=$_SESSION['current_user'];}else{$current_user='';}
        if($current_user->hasPermission('consultation')) {
            $searchType = $_POST['dropdownSearchType'];

            if($searchType === 'matricule'){
                $individusAsJson = Individu::listByMatricule($_POST['inputSearchTerm']);
            }elseif ($searchType === 'nom'){
                $individusAsJson = Individu::listByName($_POST['inputSearchTerm']);
            }

            View::render('Individus/list-individus.php', [
                'individusAsJson' => $individusAsJson
            ]);
        }else{
            View::render('Default/no-permission.php');
        }
    }

    /**
     * Handle show-individu.php view
     * @return void
     */
    public function showAction(){
        if(isset($_SESSION['current_user'])){$current_user=$_SESSION['current_user'];}else{$current_user='';}
        if($current_user->hasPermission('consultation')) {
            $individuid = $_POST['individuid'];
            $individu = Individu::getById($individuid);
            $jsonListTypesIndividu = TypeIndividu::getListAsJson();
            $chosenTypeIndividu = TypeIndividu::getNameFromIndex($individu->typeindividuid);
            $jsonListDocument = Document::listByIndividuId($individuid);
            $typedocumentexist = TypeDocument::isThereFirstTypeDocument();
            View::render('Individus/show-individu.php', [
                'individu' => $individu,
                'jsonListTypesIndividu' => $jsonListTypesIndividu,
                'chosenTypeIndividu' => $chosenTypeIndividu,
                'jsonListDocument' => $jsonListDocument,
                'typedocumentexist' => $typedocumentexist
            ]);
        }else{
            View::render('Default/no-permission.php');
        }
    }

    /**
     * Handle update of a user and redirect on specific view according to result of operation
     * @return void
     */
    public function updateAction(){
        if(isset($_SESSION['current_user'])){$current_user=$_SESSION['current_user'];}else{$current_user='';}
        if($current_user->hasPermission('modification')) {
            $typeindividuid = TypeIndividu::getIndexFromName($_POST['typeindividu']);
            $_POST['typeindividuid'] = $typeindividuid;
            $individu = new Individu($_POST);
            $jsonListDocument = Document::listByIndividuId($individu->id);

            if($individu->update() === true){
                $this->redirect('/individus/update-individu-success');
            }else{
                $jsonListTypesIndividu = TypeIndividu::getListAsJson();
                $typeindividuid = TypeIndividu::getIndexFromName($_POST['typeindividu']);
                $chosenTypeIndividu = TypeIndividu::getNameFromIndex($individu->typeindividuid);
                View::render('Individus/show-individu.php', [
                    'individu' => $individu,
                    'jsonListTypesIndividu' => $jsonListTypesIndividu,
                    'chosenTypeIndividu' => $chosenTypeIndividu,
                    'jsonListDocument' => $jsonListDocument
                ]);
            }
        }else{
            View::render('Default/no-permission.php');
        }
    }

    /**
     * Redirect to update-user-success after update Action
     * @return void
     */
    public function updateIndividuSuccessAction(){
        if(isset($_SESSION['current_user'])){$current_user=$_SESSION['current_user'];}else{$current_user='';}
        if($current_user->hasPermission('modification')) {
            View::render('Individus/update-individu-success.php');
        }else{
            View::render('Default/no-permission.php');
        }
    }

    /**
     * Handle update of a user and redirect on specific view according to result of operation
     * @return void
     */
    public function deleteAction(){
        if(isset($_SESSION['current_user'])){$current_user=$_SESSION['current_user'];}else{$current_user='';}
        if($current_user->hasPermission('modification')) {
            $id = $_POST['id'];
            if(Individu::delete($id) === true){
                View::render('Individus/delete-individu-success.php');
            }else{
                View::render('Individus/delete-individu-faillure.php');
            }
        }else{
            View::render('Default/no-permission.php');
        }
    }

	/**
	 * Ajax valifation checking the existence of a matricule
     * @return void
	 */
    public function validateMatriculeAction(){
        $is_valid = ! Individu::matriculeExists($_GET['matricule']);
	    header('Content-Type: application/json');
	    echo json_encode($is_valid);
    }
}
